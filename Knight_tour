class KnightGame:
    pos = []
    rows = int
    col = int
    cell_size = int
    chances = []
    board = []

    def board_dimensions(self):
        while True:
            try:
                col, rows = input('Enter your board dimensions:\n').split()
                col = int(col)
                rows = int(rows)
                self.col = col
                self.rows = rows
                if col < 0 or rows < 0:
                    print('Invalid dimensions!')
                    continue
                else:
                    break
            except ValueError:
                print('Invalid dimensions!')
                continue

    def board_state_builder(self, cell_size):
        border_length = ((self.col * (cell_size + 1)) + 3)
        first_dash_line = (' ' * (cell_size - 1)) + ('-' * border_length)
        last_line_num = ' ' * (cell_size + 1)
        print(self.chances)
        self.board.append(first_dash_line)
        r = (len(self.chances))
        c = -1
        for i in range(self.rows, 0, -1):
            num_row = str(i).rjust(cell_size - 1)
            row = f"{num_row}|"
            if r > c:
                r -= 1
                print(r)
            for j in range(1, self.col + 1):
                if [i, j] == self.pos:
                    row += ' ' * cell_size
                    row += 'X'
                elif [i, j] == self.chances[c]:
                    row += ' ' * cell_size
                    row += 'O'
                    # print('c', c, 'i', i, 'j', j)

                else:
                    row += ' '
                    row += '_' * cell_size
            row += ' |'
            self.board.append(row)
        for i in range(1, self.col + 1):
            col_num = str(i).rjust(cell_size)
            last_line_num += f"{col_num} "
        last_dash_line = (' ' * (cell_size - 1)) + ('-' * border_length)
        self.board.append(last_dash_line)
        self.board.append(last_line_num)

    def board_state_printer(self):
        for i in self.board:
            print(''.join(i))

    def board_state(self):
        if self.col * self.rows >= 100:
            self.cell_size = 3
            self.board_state_builder(3)
        else:
            self.board_state_builder(2)
            self.cell_size = 2

    def starting_position(self):
        while True:
            try:
                x, y = input("Enter the knight's starting position:\n").split()
                x = int(x)
                y = int(y)
                self.pos.append(y)
                self.pos.append(x)
                if not 0 < x <= self.col:
                    print("Invalid position!")
                    continue
                elif not 0 < y <= self.rows:
                    print("Invalid position!")
                else:
                    break
            except ValueError:
                print("Invalid position!")
                continue

    def possible_moves_in_board(self, x, y):
        rows = x
        cols = y
        if 0 < rows <= self.col:
            if 0 < cols <= self.rows:
                self.chances.append([rows, cols])
        self.chances.sort(reverse=True)

    def possible_moves(self):
        x1 = self.pos[0] + 2
        x2 = self.pos[0] - 2
        y1 = self.pos[1] + 1
        y2 = self.pos[1] - 1
        chance_1 = [x1, y1]
        self.possible_moves_in_board(x1, y1)
        chance_2 = [x1, y2]
        self.possible_moves_in_board(x1, y2)
        chance_3 = [x2, y1]
        self.possible_moves_in_board(x2, y1)
        chance_4 = [x2, y2]
        self.possible_moves_in_board(x2, y2)
        y3 = self.pos[1] + 2
        y4 = self.pos[1] - 2
        x3 = self.pos[0] + 1
        x4 = self.pos[0] - 1
        chance_5 = [x3, y3]
        self.possible_moves_in_board(x3, y3)
        chance_6 = [x4, y3]
        self.possible_moves_in_board(x4, y3)
        chance_7 = [x3, y4]
        self.possible_moves_in_board(x3, y4)
        chance_8 = [x4, y4]
        self.possible_moves_in_board(x4, y4)


def main():
    knight_1 = Knight_game()
    knight_1.board_dimensions()
    knight_1.starting_position()
    knight_1.possible_moves()
    knight_1.board_state()
    knight_1.board_state_printer()
    
    print(knight_1.chances)




if __name__ == "__main__":
    main()
