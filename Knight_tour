class KnightGame:
    pos = []
    rows = int
    col = int
    cell_size = int
    chances = []
    board = []
    num_of_moves_from_chances = {}
    previous_moves = []
    more_possible_moves = True
    all_cells_visited = False
    want_to_try = False

    def board_dimensions(self):
        while True:
            try:
                col, rows = input('Enter your board dimensions: ').split()
                col = int(col)
                rows = int(rows)
                self.col = col
                self.rows = rows
                if col <= 0 or rows <= 0:
                    print('Invalid dimensions!')
                    continue
                else:
                    break
            except ValueError:
                print('Invalid dimensions!')
                continue

    def starting_position(self):
        """user enters knight's starting position"""
        while True:
            print("Enter the knight's starting position: ", end='' )
            try:
                col, row = input().split()
                col = int(col)
                row = int(row)
                if not 1 <= col <= self.col:
                    print("Invalid position!")
                    continue
                elif not 1 <= row <= self.rows:
                    print("Invalid position!")
                else:
                    self.pos = [(self.rows - row), (col - 1)]
                    # print('self pos', self.pos)
                    break
            except ValueError:
                print("Invalid position!")
                continue

    def board_cell_size(self):
        """defines a cell size for the board"""
        if self.col * self.rows < 10:
            self.cell_size = 1
            self.board_state_builder(1)
        elif 10 <= self.col * self.rows < 100:
            self.board_state_builder(2)
            self.cell_size = 2
        elif self.col * self.rows >= 100:
            self.cell_size = 3
            self.board_state_builder(3)

    def regenerate_board(self):
        self.board = [[('_' * self.cell_size) for _ in range(self.col)] for _ in range(self.rows)]

    def board_state_builder(self, cell_size):
        """generates a board with first possible moves"""
        board = [[('_' * cell_size) for _ in range(self.col)] for _ in range(self.rows)]
        self.board = board
        x_knight_position = self.pos[0]
        y_knight_position = self.pos[1]
        self.board[x_knight_position][y_knight_position] = 'X'.rjust(cell_size)

    def board_state_printer(self, cell_size):
        # print('Here are the possible moves:')
        border_length = ((self.col * (cell_size + 1)) + 3)
        first_dash_line = ' ' + '-'.center(border_length, '-')
        print(first_dash_line)
        row = self.rows
        for i in self.board:
            print(f"{(str(row)).rjust(cell_size)}|", end='')
            print(' '.join(i), '|')
            row -= 1
        last_line_num = (' ' * cell_size) + ' '
        for i in range(1, self.col + 1):
            col_num = str(i).rjust(cell_size)
            last_line_num += f"{col_num} "
        print(first_dash_line)
        print(last_line_num.center(border_length))

    def possible_moves_in_board(self, x, y):
        """save all possible moves from starting pos in a 'chances' list"""
        rows = x
        cols = y
        if (0 <= rows <= (self.rows - 1)) and (0 <= cols <= (self.col - 1)):
            if [rows, cols] not in self.previous_moves:
                if [rows, cols] not in self.pos:
                    self.chances.append([rows, cols])
        self.chances.sort(reverse=True)

    def possible_moves(self, position):
        """check 8 possible moves from a position"""
        if position == self.pos:
            x1 = self.pos[0] + 2
            x2 = self.pos[0] - 2
            y1 = position[1] + 1
            y2 = position[1] - 1
            y3 = position[1] + 2
            y4 = position[1] - 2
            x3 = self.pos[0] + 1
            x4 = self.pos[0] - 1
            self.possible_moves_in_board(x1, y1)
            self.possible_moves_in_board(x2, y1)
            self.possible_moves_in_board(x1, y2)
            self.possible_moves_in_board(x2, y2)
            self.possible_moves_in_board(x3, y3)
            self.possible_moves_in_board(x4, y3)
            self.possible_moves_in_board(x3, y4)
            self.possible_moves_in_board(x4, y4)
        else:
            if self.chances:
                for i in range(len(self.chances)):
                    self.num_of_moves_from_chances[(self.chances[i][0], self.chances[i][1])] = 0
                    x1 = position[i][0] + 2
                    x2 = position[i][0] - 2
                    y1 = position[i][1] + 1
                    y2 = position[i][1] - 1
                    y3 = position[i][1] + 2
                    y4 = position[i][1] - 2
                    x3 = position[i][0] + 1
                    x4 = position[i][0] - 1
                    self.possible_moves_from_O(x1, y1, i)
                    self.possible_moves_from_O(x2, y1, i)
                    self.possible_moves_from_O(x1, y2, i)
                    self.possible_moves_from_O(x2, y2, i)
                    self.possible_moves_from_O(x3, y3, i)
                    self.possible_moves_from_O(x4, y3, i)
                    self.possible_moves_from_O(x3, y4, i)
                    self.possible_moves_from_O(x4, y4, i)
            else:
                self.more_possible_moves = False

    def possible_moves_from_O(self, x, y, i):
        """count number of moves from a position & saves sum in a dictionary"""
        rows = x
        cols = y
        if (0 <= rows <= (self.rows - 1)) and (0 <= cols <= (self.col - 1)):
            self.num_of_moves_from_chances[(self.chances[i][0], self.chances[i][1])] += 1
        if (x, y) == (self.pos[0], self.pos[1]):
            self.num_of_moves_from_chances[(self.chances[i][0], self.chances[i][1])] -= 1
        if (x, y) in self.previous_moves:
            self.num_of_moves_from_chances[(self.previous_moves[i][0], self.previous_moves[i][1])] -= 1

    def board_state_with_number_moves(self, cell_size):
        """"fx to change 0 for number of possible moves"""
        for i in range(len(self.chances)):
            x = self.chances[i][0]
            y = self.chances[i][1]
            if (x, y) in self.num_of_moves_from_chances:
                self.board[x][y] = (' ' * (cell_size - 1)) + str(self.num_of_moves_from_chances.get((x, y)))
        if len(self.previous_moves) > 0:
            for i in range(len(self.previous_moves)):
                x = self.previous_moves[i][0]
                y = self.previous_moves[i][1]
                self.board[x][y] = (' ' * (cell_size - 1)) + '*'

    def next_move(self):
        while True:
            print("Enter your next move:", end='')
            try:
                col, row = input().split()
                col = int(col)
                row = int(row)
                if [(self.rows - (row - 1 + 1)), (col - 1)] not in self.chances:
                    print("Invalid position!", end='')
                    continue
                else:
                    self.previous_moves.append([self.pos[0], self.pos[1]])
                    self.pos = []
                    self.num_of_moves_from_chances = {}
                    self.chances = []
                    self.pos = [(self.rows - row), (col - 1)]
                    x_knight_position = self.pos[0]
                    y_knight_position = self.pos[1]
                    self.regenerate_board()
                    self.board[x_knight_position][y_knight_position] = 'X'.rjust(self.cell_size)
                    break
            except ValueError:
                print("Invalid position!", end='')
                continue

    def win_(self):
        cells = (self.rows * self.col) - 1
        not_visited_cells = cells - (len(self.previous_moves))
        if not_visited_cells == 0:
            self.more_possible_moves = False
            self.all_cells_visited = True
            print('What a great tour! Congratulations!')
            exit()

    def loose_(self):
        if not self.all_cells_visited:
            squares = len(self.previous_moves) + 1
            print('No more possible moves!')
            print(f"Your knight visited {squares} squares!")

    def isSafe(self, x, y, board):
        if x >= 0 and y >= 0 and x < self.rows and y < self.col and board[x][y] == -1:
            return True
        return False

    def printSolution(self, row, col, board):
        for i in range(row):
            for j in range(col):
                self.board[i][j] = (str(board[i][j])).rjust(self.cell_size)
        self.board_state_printer(self.cell_size)

    def solveKT(self, row, col, inicial_pos):

        board = [[-1 for i in range(col)] for i in range(row)]

        move_x = [2, 1, -1, -2, -2, -1, 1, 2]
        move_y = [1, 2, 2, 1, -1, -2, -2, -1]

        board[inicial_pos[0]][inicial_pos[1]] = 1

        pos = 2

        if not self.solveKTUtil(row, col, board, 0, 0, move_x, move_y, pos):
            print("Solution does not exist")
            exit()
        else:
            if self.want_to_try:
                pass
            if not self.want_to_try:
                print("Here's the solution!:")
                self.printSolution(row, col, board)

    def solveKTUtil(self, row, col, board, curr_x, curr_y, move_x, move_y, pos):
        if pos == (row * col) +1:
            return True

        for i in range(8):
            new_x = curr_x + move_x[i]
            new_y = curr_y + move_y[i]
            if self.isSafe(new_x, new_y, board):
                board[new_x][new_y] = pos
                if self.solveKTUtil(row, col, board, new_x, new_y, move_x, move_y, pos + 1):
                    return True

                board[new_x][new_y] = -1
        return False

    def wanna_try(self):
        while True:
            try_or_not = input('Do you want to try the puzzle? (y/n): ')
            if try_or_not == 'n':
                self.solveKT(self.rows, self.col, self.pos)
                break
            if try_or_not == 'y':
                self.want_to_try = True
                self.solveKT(self.rows, self.col, self.pos)
                break
            else:
                print("Invalid input!", end='')
                continue


def main():
    knight_1 = KnightGame()
    knight_1.board_dimensions()
    knight_1.starting_position()
    knight_1.board_cell_size()
    knight_1.wanna_try()
    if knight_1.want_to_try:

        knight_1.possible_moves(knight_1.pos)
        knight_1.possible_moves(knight_1.chances)
        knight_1.board_state_with_number_moves(knight_1.cell_size)
        knight_1.board_state_printer(knight_1.cell_size)

        while knight_1.more_possible_moves:
            knight_1.next_move()
            knight_1.possible_moves(knight_1.pos)
            knight_1.possible_moves(knight_1.chances)
            knight_1.board_state_with_number_moves(knight_1.cell_size)
            knight_1.board_state_printer(knight_1.cell_size)

        knight_1.win_()
        knight_1.loose_()


if __name__ == "__main__":
    main()
