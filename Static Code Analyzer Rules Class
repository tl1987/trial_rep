import os
import re
import ast


class RulesCodeAnalyzer:
    errors = {
        'S001': 'Too Long',
        'S002': 'Indentation is not a multiple of four',
        'S003': 'Unnecessary semicolon after a statement',
        'S004': 'Less than two spaces before inline comments',
        'S005': 'TODO found',
        'S006': 'More than two blank lines preceding a code line',
        'S007': 'Too many spaces after {} (def or class)',
        'S008': 'Class name {} should be written in CamelCase',
        'S009': 'Function name {} should be written in snake_case',
        'S010': 'Argument name {} should be written in snake_case',
        'S011': 'Variable {} should be written in snake_case',
        'S012': 'The default argument value is mutable'}

    def __init__(self):
        self.is_file = False
        self.errors_report = []

    def S001_too_long(self, lines_, file_name, user_file_or_dir):
        for i in range(len(lines_)):
            if len(lines_[i]) > 79:
                if self.is_file:
                    self.errors_report.append(f"{file_name}: line {i + 1}: s001 {self.errors['S001']}")
                else:
                    self.errors_report.append(f"{user_file_or_dir}{os.sep}{file_name}: "
                                              f"line {i + 1}: s001 {self.errors['S001']}")

    def S002_indentation(self, lines_, file_name, user_file_or_dir):
        for i in range(len(lines_)):

            if lines_[i] != '\n' and (len(lines_[i]) - len(lines_[i].lstrip())) % 4:
                if self.is_file:
                    self.errors_report.append(f"{file_name}: line {i + 1}: s002 {self.errors['S002']}")
                else:
                    self.errors_report.append(f"{user_file_or_dir}{os.sep}{file_name}: "
                                              f"line {i + 1}: s002 {self.errors['S002']}")

    def S003_semicolon(self, lines_, file_name, user_file_or_dir):
        for i in range(len(lines_)):
            regexp = r"\S.+[\w)];"
            regexp2 = r'#\s+;'
            regexp3 = r'[\#\'\"][\s\w]+;'
            if re.search(regexp, lines_[i]) and not re.search(regexp2, lines_[i]) and not re.search(regexp3, lines_[i]):
                if self.is_file:
                    self.errors_report.append(f"{file_name}: line {i + 1}: s003 {self.errors['S003']}")
                else:
                    self.errors_report.append(f"{user_file_or_dir}{os.sep}{file_name}: "
                                              f"line {i + 1}: s003 {self.errors['S003']}")

    def S004_less_spaces(self, lines_, file_name, user_file_or_dir):
        for i in range(len(lines_)):
            regexp = r'\s{,1}\#$'
            regexp2 = r'\w.*[^\s]#'
            regexp3 = r'\w.+[)][ ]#'
            regexp4 = r'.+[ ]#'
            regexp_to_avoid = r'.+\s{2,}#'
            if not re.search(regexp_to_avoid, lines_[i]):
                if re.search(regexp, lines_[i]) or re.search(regexp2, lines_[i]) or \
                        re.search(regexp3, lines_[i]) or re.search(regexp4, lines_[i]):
                    # print(lines_[i])
                    if self.is_file:
                        self.errors_report.append(f"{file_name}: line {i + 1}: s004 {self.errors['S004']}")
                    else:
                        self.errors_report.append(
                            f"{user_file_or_dir}{os.sep}{file_name}: "
                            f"line {i + 1}: s004 {self.errors['S004']}")

    def S005_TODO(self, lines_, file_name, user_file_or_dir):
        for i in range(len(lines_)):
            regexp = r'\# [TODOtodo]'
            if re.search(regexp, lines_[i]):
                if self.is_file:
                    self.errors_report.append(f"{file_name}: line {i + 1}: s005 {self.errors['S005']}")
                else:
                    self.errors_report.append(f"{user_file_or_dir}{os.sep}{file_name}: "
                                              f"line {i + 1}: s005 {self.errors['S005']}")

    def S006_blank_lines(self, lines_, file_name, user_file_or_dir):
        regexp = r'^[\n]'
        regexp2_not_blank = r'^[^\n]'

        if re.search(regexp, lines_[0]) and re.search(regexp, lines_[1]) and re.search(regexp, lines_[2]):

            for i in range(3, len(lines_)):
                if re.search(regexp2_not_blank, lines_[i]):
                    if self.is_file:
                        self.errors_report.append(f"{file_name}: line {i + 1}: s006 {self.errors['S006']}")
                    else:
                        self.errors_report.append(f"{user_file_or_dir}{os.sep}{file_name}: "
                                                  f"line {i + 1}: s006 {self.errors['S006']}")

        for i in range(3, len(lines_)):
            if re.search(regexp2_not_blank, lines_[i]):
                if re.search(regexp, lines_[i - 1]) and re.search(regexp, lines_[i - 2]) \
                        and re.search(regexp, lines_[i - 3]):
                    if self.is_file:
                        self.errors_report.append(f"{file_name}: "
                                                  f"line {i + 1}: s006 {self.errors['S006']}")
                    else:
                        self.errors_report.append(
                            f"{user_file_or_dir}{os.sep}{file_name}: "
                            f"line {i + 1}: s006 {self.errors['S006']}")

    def S007_spaces_def_class(self, lines_, file_name, user_file_or_dir):
        regexp = r'def\s{2,}\w+'
        regexp2 = r'class\s{2,}\w+'
        for i in range(len(lines_)):
            if re.search(regexp, lines_[i]) or re.search(regexp2, lines_[i]):
                construction_name = lines_[i].split()[1].replace(':', '').replace('()', '')
                # print(construction_name)
                if self.is_file:
                    self.errors_report.append(f"{file_name}: line {i + 1}: s007 "
                                              f"{self.errors['S007'].format(construction_name)}")
                else:
                    self.errors_report.append(f"{user_file_or_dir}{os.sep}{file_name}: line "
                                              f"{i + 1}: s007 {self.errors['S007'].format(construction_name)}")

    def S008_camel_case_class(self, lines_, file_name, user_file_or_dir):
        regexp = r'^class'
        for i in range(len(lines_)):
            if re.search(regexp, lines_[i]):
                class_name = lines_[i].split(' ')[1].replace('():', '').replace(':', '').strip()
                if class_name.islower() or '_' in class_name:
                    if self.is_file:
                        self.errors_report.append(f"{file_name}: line {i + 1}: s008 "
                                                  f"{self.errors['S008'].format(class_name)}")
                    else:
                        self.errors_report.append(f"{user_file_or_dir}{os.sep}{file_name}: "
                                                  f"line {i + 1}: s008 {self.errors['S008'].format(class_name)}")

    def S009_function_snake_name(self, lines_, file_name, user_file_or_dir):
        regexp_to_avoid = r'def\sclass\s'
        regexp_to_find = r'def\s'
        for i in range(len(lines_)):
            if not re.search(regexp_to_avoid, lines_[i]):
                if re.search(regexp_to_find, lines_[i]):
                    fx_name = lines_[i].strip().split()[1].replace('():', '')
                    # print(fx_name)
                    if not fx_name.islower():
                        if self.is_file:
                            self.errors_report.append(f"{file_name}: line {i + 1}: s009 "
                                                      f"{self.errors['S009'].format(fx_name)}")
                        else:
                            self.errors_report.append(f"{user_file_or_dir}{os.sep}{file_name}: line {i + 1}: s009 "
                                                      f"{self.errors['S009'].format(fx_name)}")

    def s010_argument_name(self, file_name, user_file_or_dir):
        script = open(file_name).read()
        tree = ast.parse(script)
        nodes = ast.walk(tree)
        for node in nodes:
            if isinstance(node, ast.FunctionDef):
                function_name = node.name
                arguments_name = [node.arg for node in node.args.args]
                for i in arguments_name:
                    if not i.islower():
                        line_number = node.lineno
                        # print(line_number)
                        # print(i)
                        if self.is_file:
                            self.errors_report.append(f"{file_name}: "
                                                      f"line {line_number}: s010 {self.errors['S010'].format(i)}")
                        else:
                            self.errors_report.append(f"{user_file_or_dir}{os.sep}{file_name}: "
                                                      f"line {line_number}: s010 {self.errors['S010'].format(i)}")
                    else:
                        pass

    def s011_var_name_snake_case(self, file_name, user_file_or_dir):
        script = open(file_name).read()
        tree = ast.parse(script)
        nodes = ast.walk(tree)
        for node in nodes:
            if isinstance(node, ast.Name) and isinstance(node.ctx, ast.Store):
                variable_name = node.id
                line_number = node.lineno
                if not variable_name.islower():
                    if self.is_file:
                        self.errors_report.append(f"{file_name}: line {line_number}: s011 "
                                                  f"{self.errors['S011'].format(variable_name)}")
                    else:
                        self.errors_report.append(
                            f"{user_file_or_dir}{os.sep}{file_name}: line {line_number}: s011 "
                            f"{self.errors['S011'].format(variable_name)}")

    def s012_default_arg_mutable(self, file_name, user_file_or_dir):
        script = open(file_name).read()
        tree = ast.parse(script)
        nodes = ast.walk(tree)
        for node in nodes:
            if isinstance(node, ast.FunctionDef):
                arguments_ = [x for x in node.args.defaults]
                # print(arguments_)
                for i in arguments_:
                    if isinstance(i, ast.List):
                        line_number = node.lineno
                        if self.is_file:
                            self.errors_report.append(f"{file_name}: line {line_number}: s012 {self.errors['S012']}")
                        else:
                            self.errors_report.append(f"{user_file_or_dir}{os.sep}{file_name}: "
                                                      f"line {line_number}: s012 {self.errors['S012']}")
